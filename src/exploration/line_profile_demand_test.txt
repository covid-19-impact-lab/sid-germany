Timer unit: 1e-06 s

Total time: 13.4639 s
File: /home/klara/Dropbox/Projects/sid-germany/src/testing/testing_models.py
Function: demand_test at line 40

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    40                                           def demand_test(
    41                                               states,
    42                                               params,
    43                                               seed,
    44                                               positivity_rate_overall,
    45                                               test_shares_by_age_group,
    46                                               positivity_rate_by_age_group,
    47                                           ):
    48                                               """Test demand function.
    49                                           
    50                                               Test demand is calculated in such a way that the demand fits to the empirical
    51                                               distribution of positive tests in the empirical data.
    52                                           
    53                                               We calculate the tests designated in each age group as follows:
    54                                               Firstly, we calculate from the number of infected people in the simulation and the
    55                                               share_known_cases how many positive tests are to
    56                                               be distributed in the whole population. From this, using the overall positivity rate
    57                                               of tests we get to the full budget of tests to be distributed across the population.
    58                                               Using the ARS data, we get the share of tests (positive and negative) going to each
    59                                               age group. Using the age specific positivity rate - also reported in the ARS data -
    60                                               then gets us the number of positive tests to distribute in each age group.
    61                                               Using the RKI and ARS data therefore allows us to reflect the German testing
    62                                               strategy over age groups, e.g .preferential testing of older individuals.
    63                                           
    64                                               In each age group we first distribute tests among those that recently developed
    65                                               symptoms but have no pending test and do not know their infection state yet.
    66                                               We then test all education workers such as teachers that have not been tested
    67                                               in the last week and are not on vacation.
    68                                               We then distribute the remaining tests among the remaining currently
    69                                               infectious such that we use up the full test budget in each age group.
    70                                           
    71                                               Args:
    72                                                   states (pandas.DataFrame): The states of the individuals.
    73                                                   params (pandas.DataFrame): A DataFrame with parameters. It needs to contain
    74                                                       the entry ("test_demand", "symptoms", "share_symptomatic_requesting_test").
    75                                                   seed (int): Seed for reproducibility.
    76                                                   share_known_cases (pandas.Series): share of infections that is detected.
    77                                                   positivity_rate_overall (pandas.Series): share of total tests that was positive.
    78                                                   test_shares_by_age_group (pandas.Series or pandas.DataFrame):
    79                                                       share of tests that was administered to each age group. If a Series the
    80                                                       index are the age groups. If a DataFrame, the index are the dates and
    81                                                       the columns are the age groups.
    82                                                   positivity_rate_by_age_group (pandas.Series or pandas.DataFrame):
    83                                                       share of tests that was positive in each age group. If a Series the
    84                                                       index are the age groups. If a DataFrame, the index are the dates and
    85                                                       the columns are the age groups.
    86                                           
    87                                               Returns:
    88                                                   demand_probability (numpy.ndarray, pandas.Series): An array or a series
    89                                                       which contains the probability for each individual demanding a test.
    90                                           
    91                                               """
    92        60        557.0      9.3      0.0      np.random.seed(seed)
    93        60      73731.0   1228.8      0.5      n_newly_infected = states["newly_infected"].sum()
    94        60         70.0      1.2      0.0      symptom_tuple = ("test_demand", "symptoms", "share_symptomatic_requesting_test")
    95        60      21717.0    361.9      0.2      share_symptomatic_requesting_test = params.loc[symptom_tuple, "value"]
    96        60       4299.0     71.7      0.0      date = get_date(states)
    97        60         83.0      1.4      0.0      if isinstance(test_shares_by_age_group, pd.DataFrame):
    98        60      14236.0    237.3      0.1          test_shares_by_age_group = test_shares_by_age_group.loc[date]
    99        60         98.0      1.6      0.0      if isinstance(positivity_rate_by_age_group, pd.DataFrame):
   100        60      13171.0    219.5      0.1          positivity_rate_by_age_group = positivity_rate_by_age_group.loc[date]
   101        60         85.0      1.4      0.0      if isinstance(positivity_rate_overall, pd.Series):
   102        60       3847.0     64.1      0.0          positivity_rate_overall = positivity_rate_overall.loc[date]
   103        60        155.0      2.6      0.0      if share_symptomatic_requesting_test > 1.0 or share_symptomatic_requesting_test < 0:
   104                                                   raise ValueError(
   105                                                       "The share of symptomatic individuals requesting a test must lie in the "
   106                                                       f"[0, 1] interval, you specified {share_symptomatic_requesting_test}"
   107                                                   )
   108                                           
   109        60        508.0      8.5      0.0      with warnings.catch_warnings():
   110       120       1213.0     10.1      0.0          warnings.filterwarnings(
   111        60         45.0      0.8      0.0              "ignore", message="indexing past lexsort depth may impact performance."
   112                                                   )
   113        60      35835.0    597.2      0.3          params_slice = params.loc[("share_known_cases", "share_known_cases")]
   114        60      88086.0   1468.1      0.7      share_known_cases = get_share_known_cases_for_one_day(date, params_slice)
   115                                           
   116       120      71320.0    594.3      0.5      n_pos_tests_for_each_group = _calculate_positive_tests_to_distribute_per_age_group(
   117        60         44.0      0.7      0.0          n_newly_infected=n_newly_infected,
   118        60         43.0      0.7      0.0          share_known_cases=share_known_cases,
   119        60         36.0      0.6      0.0          positivity_rate_overall=positivity_rate_overall,
   120        60         41.0      0.7      0.0          test_shares_by_age_group=test_shares_by_age_group,
   121        60         39.0      0.7      0.0          positivity_rate_by_age_group=positivity_rate_by_age_group,
   122                                               )
   123        60      27152.0    452.5      0.2      developed_symptoms_yesterday = states["cd_symptoms_true"] == -1
   124                                           
   125        60       5674.0     94.6      0.0      if developed_symptoms_yesterday.all():  # this means it's the first day
   126                                                   symptomatic_without_test = pd.Series(False, index=states.index)
   127                                               else:
   128        60      70350.0   1172.5      0.5          untested = ~states["pending_test"] & ~states["knows_immune"]
   129        60      30171.0    502.9      0.2          symptomatic_without_test = developed_symptoms_yesterday & untested
   130        60        117.0      1.9      0.0      if share_symptomatic_requesting_test == 1.0:
   131                                                   demanded = symptomatic_without_test
   132                                               else:
   133                                                   # this ignores the designated number of tests per age group.
   134                                                   # Adjusting the number of tests to the designated number is done in
   135                                                   # `_scale_demand_up_or_down` below.
   136       120        160.0      1.3      0.0          n_to_demand = int(
   137        60      70101.0   1168.3      0.5              share_symptomatic_requesting_test * symptomatic_without_test.sum()
   138                                                   )
   139        60     420789.0   7013.1      3.1          pool = states[symptomatic_without_test].index
   140        60       3258.0     54.3      0.0          drawn = np.random.choice(size=n_to_demand, a=pool, replace=False)
   141        60      11597.0    193.3      0.1          demanded = pd.Series(False, index=states.index)
   142        60     101073.0   1684.5      0.8          demanded[drawn] = True
   143                                           
   144        60        999.0     16.6      0.0      if date > pd.Timestamp("2020-12-31"):
   145        60    1245938.0  20765.6      9.3          demanded = _demand_test_for_educ_workers(demanded, states, params)
   146                                           
   147        60     721805.0  12030.1      5.4      demands_by_age_group = demanded.groupby(states["age_group_rki"]).sum()
   148        60     117465.0   1957.8      0.9      remaining = n_pos_tests_for_each_group - demands_by_age_group
   149        60    9553096.0 159218.3     71.0      demanded = _scale_demand_up_or_down(demanded, states, remaining)
   150                                           
   151        60      15110.0    251.8      0.1      if (remaining < 0).any():
   152        56     317079.0   5662.1      2.4          info = pd.concat([demands_by_age_group, n_pos_tests_for_each_group], axis=1)
   153        56      11643.0    207.9      0.1          info.columns = ["demand", "target demand"]
   154       112      61787.0    551.7      0.5          info["difference"] = (info["demand"] - info["target demand"]) / info[
   155        56         67.0      1.2      0.0              "target demand"
   156                                                   ]
   157        56     163134.0   2913.1      1.2          info = info.T.round(2)
   158       112        304.0      2.7      0.0          warnings.warn(
   159        56     185692.0   3315.9      1.4              f"\n\nToo much endogenous test demand on {date.date()} ({date.day_name()}). "
   160                                                       "This is an indication that the share of symptomatic infections is too high or"
   161                                                       f"that too many symptomatic people demand a test:\n\n{info.to_string()}\n\n"
   162                                                   )
   163                                           
   164        60         58.0      1.0      0.0      return demanded
